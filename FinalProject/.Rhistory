'http://www.basketball-reference.com'
stat_type <-
match.arg(stat_type,choices = c("Advanced",'Totals','Per Minute',"Per Game"))
stat_type %<>%
tolower %>% gsub("\\ ",'_',.)
url <-
paste0(bref_team_base,league,'_',season.end,'_',stat_type,'.html')
css_page <-
paste0('#',stat_type)
css_player <-
'td:nth-child(2) a'
page <- url %>% read_html
tables <-
page %>%
html_table(fill = T)
url.player <-
page %>%
html_nodes(css_player) %>%
html_attr('href') %>%
paste0('http://www.basketball-reference.com/',.)
names(data) %<>%
tolower
data %<>%
dplyr::filter(!rk == 'Rk')
data %<>%
dplyr::select(-rk) %>%
rename(id.team = tm, id.pos = pos)
if(team.totals == T){
multi.teams <-
data %>%
dplyr::filter(id.team == "TOT")
one.team <-
data %>%
dplyr::filter(!player %in% multi.teams$player)
data <-
bind_rows(multi.teams,one.team) %>%
arrange(player)
} else{
data %<>%
dplyr::filter(!id.team == 'TOT')
}
numerics <-
data %>%
dplyr::select(-player, -id.pos, -id.team) %>%
names
data[,numerics] %<>%
apply(2, as.numeric)
season.start <-
season.end - 1
id.season <-
season.start %>%
paste0('-',season.end %>% substr(3,4))
data %<>%
mutate(season.end,
id.season,
id.pos = data$id.pos %>% substr(1,2),
id.name.table = stat_type,
url.season = url)
data$player.hof <-
data$player %>%
grepl('\\*',.)
data$player %<>%
gsub('\\*','',.)
if(c('var.20') %in% names(data)){
data %<>%
dplyr::select(-var.20, -var.25)
}
return(data)
}
data15 <-
get_bref_player_season_stats(season.end = 2015,stat_type = "Per Game",team.totals = T)
url <-paste0(bref_team_base,league,'_',season.end,'_',stat_type,'.html')
get_bref_player_season_stats <-  function(season.end, stat_type = c("Advanced","Totals","Per Minute","Per Game"),  team.totals = F , league = 'NBA'){
packages <-
c('rvest','magrittr','dplyr','stringr','tidyr')
lapply(packages, library, character.only = T)
bref_team_base <- 'http://www.basketball-reference.com/leagues/'
bref_base <-'http://www.basketball-reference.com'
stat_type <-match.arg(stat_type,choices = c("Advanced",'Totals','Per Minute',"Per Game"))
stat_type %<>% tolower %>% gsub("\\ ",'_',.)
url <- paste0(bref_team_base,league,'_',season.end,'_',stat_type,'.html')
css_page <-
paste0('#',stat_type)
css_player <-
'td:nth-child(2) a'
page <- url %>% read_html
tables <-
page %>%
html_table(fill = T)
data <-
tables[1] %>%
data.frame %>%
tbl_df
url.player <-
page %>%
html_nodes(css_player) %>%
html_attr('href') %>%
paste0('http://www.basketball-reference.com/',.)
names(data) %<>%
tolower
data %<>%
dplyr::filter(!rk == 'Rk')
data %<>%
dplyr::select(-rk) %>%
rename(id.team = tm, id.pos = pos)
if(team.totals == T){
multi.teams <-
data %>%
dplyr::filter(id.team == "TOT")
one.team <-
data %>%
dplyr::filter(!player %in% multi.teams$player)
data <-
bind_rows(multi.teams,one.team) %>%
arrange(player)
} else{
data %<>%
dplyr::filter(!id.team == 'TOT')
}
numerics <-
data %>%
dplyr::select(-player, -id.pos, -id.team) %>%
names
data[,numerics] %<>%
apply(2, as.numeric)
season.start <-
season.end - 1
id.season <-
season.start %>%
paste0('-',season.end %>% substr(3,4))
data %<>%
mutate(season.end,
id.season,
id.pos = data$id.pos %>% substr(1,2),
id.name.table = stat_type,
url.season = url)
data$player.hof <-
data$player %>%
grepl('\\*',.)
data$player %<>%
gsub('\\*','',.)
if(c('var.20') %in% names(data)){
data %<>%
dplyr::select(-var.20, -var.25)
}
return(data)
}
data15 <- get_bref_player_season_stats(season.end = 2015,stat_type = "Per Game",team.totals = T)
c('rvest','dplyr','pipeR') -> packages
#dplyr or pipeR use the install.packages function to install them, install.packages('dplyr') and install.packages('pipeR')
#If you don't have rvest do the following - install devtools, install.packages('devtools')
#Load devtools using library(devtools) and then install rvest by using install_github('hadley/rvest')
lapply(packages, library, character.only = T)
'http://www.basketball-reference.com/leagues/NBA_2014.html' -> url
'#team' -> css_page
'#team , #team a' -> css_id
url %>>%
html %>>%
html_nodes(css_page) %>>%
html_table(header = F) %>>%
data.frame() %>>%
tbl_df() -> total_table
total_table %>>%
dplyr::dplyr::filter(X.1 == 'Rk') %>>% as.character -> names
'Rk' %>>% grep(x = total_table$X.1) -> row_of_header #find where rank is
names %>>% tolower -> names(total_table)
names(total_table) %>>% (gsub('\\%|/','\\.',.)) -> names(total_table)
(row_of_header + 1) %>>% (total_table[.:nrow(total_table),]) -> total_table #skip that row and go to the end
NULL -> total_table$rk
total_table$team %>>% grepl(pattern = '\\*') -> total_table$playoff_team
total_table$team %>>% (gsub('\\*','',.)) -> total_table$team
total_table %>>%
dplyr::filter(!team == 'League Average') -> total_table
total_table %>>% write.csv('Desktop/2014_team_data.csv', row.names = F) #pick where you want to save it
getBREFTeamStatTable <- function(season_end = 2015, table_name = 'team', date = T){
c('rvest','dplyr','pipeR') -> packages
lapply(packages, library, character.only = T)
'http://www.basketball-reference.com/leagues/' -> base
'NBA' -> league
'#' %>>% paste0(table_name) -> css_page
css_page %>>% paste0(" , ", css_page,' a') -> css_id
table_name %>>% tolower -> table_name
table_name %>>% paste('stats', sep = "_") -> table
base %>>% paste0(league,'_',season_end,".html") -> url
url %>>% ## get table
html %>>%
html_nodes(css_page) %>>%
html_table(header = F) %>>% data.frame() %>>% tbl_df() -> df
if(df$X.1[1] == 'Rk'){
df %>>%
dplyr::filter(X.1 == "Rk") %>>% as.character -> names
'Rk' %>>% grep(x = df$X.1) -> row_of_header #find where rank is
(row_of_header + 1) %>>% (df[.:nrow(df),]) -> df #skip that row and go to the end
names %>>% tolower-> names(df)} else{
df %>>%
dplyr::filter(X.1 == "Rk") %>>% as.character -> names
'Rk' %>>% grep(x = df$X.1) -> row_of_header #find where rank is
(row_of_header + 1) %>>% (df[.:nrow(df),]) -> df #skip that row and go to the end
names %>>% tolower-> names(df)
}
names(df) %>>% (gsub('\\%|/','\\.',.)) -> names(df)
NULL -> df$rk
c('team','arena') -> table_name_character
df[,!(df %>>% names) %in% table_name_character] %>>% apply(2, function(x) gsub('\\,','',x) %>>%
as.numeric(x))  -> df[,!(df %>>% names) %in% table_name_character] #get rid of commas and make numeric
df$team %>>% grepl(pattern = '\\*') -> df$playoff_team
df$team %>>% (gsub('\\*','',.)) -> df$team
df %>>% nrow() -1  -> rows
df[1:rows,] -> df
(season_end-1) %>>% paste0("-",season_end) -> season
##Grab Team Ids
url %>>% ## get table
html %>>%
html_nodes(css_id) %>>%
html_attrs() %>>% unlist %>>% as.character -> stems
stems[3:length(stems)] -> stems
stems %>>% (gsub('\\/|.html|teams','',.)) %>>%
(gsub(season_end,'',.)) -> bref_team_id
data.frame(season,table_name = table, bref_team_id, df) -> df
if(date == T){
Sys.time() -> df$scrape_time
}
return(df)
}
c('rvest','dplyr','pipeR') -> packages
#dplyr or pipeR use the install.packages function to install them, install.packages('dplyr') and install.packages('pipeR')
#If you don't have rvest do the following - install devtools, install.packages('devtools')
#Load devtools using library(devtools) and then install rvest by using install_github('hadley/rvest')
lapply(packages, library, character.only = T)
'http://www.basketball-reference.com/leagues/NBA_2014.html' -> url
'#team' -> css_page
'#team , #team a' -> css_id
url %>>%
html %>>%
html_nodes(css_page) %>>%
html_table(header = F) %>>%
data.frame() %>>%
tbl_df() -> total_table
total_table %>>%
dplyr::dplyr::filter(X.1 == 'Rk') %>>% as.character -> names
'Rk' %>>% grep(x = total_table$X.1) -> row_of_header #find where rank is
names %>>% tolower -> names(total_table)
names(total_table) %>>% (gsub('\\%|/','\\.',.)) -> names(total_table)
(row_of_header + 1) %>>% (total_table[.:nrow(total_table),]) -> total_table #skip that row and go to the end
NULL -> total_table$rk
total_table$team %>>% grepl(pattern = '\\*') -> total_table$playoff_team
total_table$team %>>% (gsub('\\*','',.)) -> total_table$team
total_table %>>%
dplyr::filter(!team == 'League Average') -> total_table
total_table %>>% write.csv('/users/bcarancibia/CUNY_IS_624/FinalProject/2014_team_data.csv', row.names = F) #pick where you want to save it
getBREFTeamStatTable <- function(season_end = 2015, table_name = 'team', date = T){
c('rvest','dplyr','pipeR') -> packages
lapply(packages, library, character.only = T)
'http://www.basketball-reference.com/leagues/' -> base
'NBA' -> league
'#' %>>% paste0(table_name) -> css_page
css_page %>>% paste0(" , ", css_page,' a') -> css_id
table_name %>>% tolower -> table_name
table_name %>>% paste('stats', sep = "_") -> table
base %>>% paste0(league,'_',season_end,".html") -> url
url %>>% ## get table
html %>>%
html_nodes(css_page) %>>%
html_table(header = F) %>>% data.frame() %>>% tbl_df() -> df
if(df$X.1[1] == 'Rk'){
df %>>%
dplyr::filter(X.1 == "Rk") %>>% as.character -> names
'Rk' %>>% grep(x = df$X.1) -> row_of_header #find where rank is
(row_of_header + 1) %>>% (df[.:nrow(df),]) -> df #skip that row and go to the end
names %>>% tolower-> names(df)} else{
df %>>%
dplyr::filter(X.1 == "Rk") %>>% as.character -> names
'Rk' %>>% grep(x = df$X.1) -> row_of_header #find where rank is
(row_of_header + 1) %>>% (df[.:nrow(df),]) -> df #skip that row and go to the end
names %>>% tolower-> names(df)
}
names(df) %>>% (gsub('\\%|/','\\.',.)) -> names(df)
NULL -> df$rk
c('team','arena') -> table_name_character
df[,!(df %>>% names) %in% table_name_character] %>>% apply(2, function(x) gsub('\\,','',x) %>>%
as.numeric(x))  -> df[,!(df %>>% names) %in% table_name_character] #get rid of commas and make numeric
df$team %>>% grepl(pattern = '\\*') -> df$playoff_team
df$team %>>% (gsub('\\*','',.)) -> df$team
df %>>% nrow() -1  -> rows
df[1:rows,] -> df
(season_end-1) %>>% paste0("-",season_end) -> season
##Grab Team Ids
url %>>% ## get table
html %>>%
html_nodes(css_id) %>>%
html_attrs() %>>% unlist %>>% as.character -> stems
stems[3:length(stems)] -> stems
stems %>>% (gsub('\\/|.html|teams','',.)) %>>%
(gsub(season_end,'',.)) -> bref_team_id
data.frame(season,table_name = table, bref_team_id, df) -> df
if(date == T){
Sys.time() -> df$scrape_time
}
return(df)
}
total_table %>>% write.csv('/users/bcarancibia/CUNY_IS_624/FinalProject/2014_team_data.csv', row.names = F) #pick where you want to save it
c('rvest','dplyr','pipeR') -> packages
#dplyr or pipeR use the install.packages function to install them, install.packages('dplyr') and install.packages('pipeR')
#If you don't have rvest do the following - install devtools, install.packages('devtools')
#Load devtools using library(devtools) and then install rvest by using install_github('hadley/rvest')
lapply(packages, library, character.only = T)
'http://www.basketball-reference.com/leagues/NBA_2014.html' -> url
'#team' -> css_page
'#team , #team a' -> css_id
url %>>%
html %>>%
html_nodes(css_page) %>>%
html_table(header = F) %>>%
data.frame() %>>%
tbl_df() -> total_table
total_table %>>%
dplyr::dplyr::filter(X.1 == 'Rk') %>>% as.character -> names
'Rk' %>>% grep(x = total_table$X.1) -> row_of_header #find where rank is
names %>>% tolower -> names(total_table)
names(total_table) %>>% (gsub('\\%|/','\\.',.)) -> names(total_table)
(row_of_header + 1) %>>% (total_table[.:nrow(total_table),]) -> total_table #skip that row and go to the end
NULL -> total_table$rk
total_table$team %>>% grepl(pattern = '\\*') -> total_table$playoff_team
total_table$team %>>% (gsub('\\*','',.)) -> total_table$team
total_table %>>%
dplyr::filter(!team == 'League Average') -> total_table
c('rvest','dplyr','pipeR') -> packages
lapply(packages, library, character.only = T)
'http://www.basketball-reference.com/leagues/NBA_2014.html' -> url
'#team' -> css_page
'#team , #team a' -> css_id
url %>>%
html %>>%
html_nodes(css_page) %>>%
html_table(header = F) %>>%
data.frame() %>>%
tbl_df() -> total_table
url %>%
html %>%
html_nodes(css_page) %>%
html_table(header = F) %>%
data.frame() %>%
tbl_df() -> total_table
total_table %>%
dplyr::dplyr::filter(X.1 == 'Rk') %>% as.character -> names
'Rk' %>>% grep(x = total_table$X.1) -> row_of_header #find where rank is
names %>>% tolower -> names(total_table)
names(total_table) %>>% (gsub('\\%|/','\\.',.)) -> names(total_table)
(row_of_header + 1) %>>% (total_table[.:nrow(total_table),]) -> total_table #skip that row and go to the end
NULL -> total_table$rk
total_table$team %>>% grepl(pattern = '\\*') -> total_table$playoff_team
total_table$team %>>% (gsub('\\*','',.)) -> total_table$team
total_table %>>%
dplyr::filter(!team == 'League Average') -> total_table
nba <- read.csv("/users/bcarancibia/CUNY_IS_624/FinalProject/nbaplayerdata.csv", headers=TRUE)
nba <- read.csv("/users/bcarancibia/CUNY_IS_624/FinalProject/nbaplayerdata.csv", header=TRUE)
View(nba)
Summary(nba)
summary(nba)
length(nba$pos)
unique(nba$pos)
count(nba$pos)
sum(nba$pos)
unique(nba$age)
unique(nba$age)
unique(bref_team_id)
unique(nba$bref_team_id)
View(nba$bref_team_id=="TOT")
nba <- read.csv("/users/bcarancibia/CUNY_IS_624/FinalProject/nbaplayerdata.csv", header=TRUE)
View(nba)
summary(nba)
unique(nba$pos)
#There are 7 NA for age, remove them
unique(nba$age)
unique(nba$bref_team_id)
#One thing to notice is that the largest amount for teams is TOT which means that is total for all teams(player played for more than one team that year)
library(fpp)
plastics
x <- plastics
x[18] <- x[18] + 500
sa2 <- seasadj(stl(x, s.window="periodic"))
sa3 <- seasadj(stl(x, s.window="periodic", robust=TRUE))
plot(sa, col="blue", ylim=range(sa,sa2,sa3))
lines(sa2,col="red")
lines(sa3, col="green")
decomp <- decompose(plastics, type="multiplicative")
plot(decomp)
sa <- seasadj(decomp)
plot(sa)
x <- plastics
x[18] <- x[18] + 500
sa2 <- seasadj(stl(x, s.window="periodic"))
sa3 <- seasadj(stl(x, s.window="periodic", robust=TRUE))
plot(sa, col="blue", ylim=range(sa,sa2,sa3))
lines(sa2,col="red")
lines(sa3, col="green")
x[58] <- x[58] + 500
x <- plastics
x[58] <- x[58] + 500
sa2 <- seasadj(stl(x, s.window="periodic"))
sa3 <- seasadj(stl(x, s.window="periodic", robust=TRUE))
plot(sa, col="blue", ylim=range(sa,sa2,sa3))
lines(sa2,col="red")
lines(sa3, col="green")
ibmclose
plot(ibmclose)
Acf(ibmclose[,1],main="")
par(mfrow=c(1,2))
Acf(ibmclose[,1],main="")
Pacf(ibmclose[,1],main="")
Acf(ibmclosm,main="")
Acf(ibmclose,main="")
Pacf(ibmclose[,1],main="")
Pacf(ibmclose,main="")
plot(ibmclose)
Acf(ibmclose,main="")
Pacf(ibmclose,main="")
## libraries
library("matrixcalc")
library("caTools")
library("randomForest")
library("caret")
setwd("/users/bcarancibia/CUNY_IS_624/FinalProject")
## load data
nba1 = read.csv("/users/bcarancibia/CUNY_IS_624/FinalProject/data/scores_team_00213.csv") # team box scores 2013-14
summary(nba1)
summary(nba2)
nba2 = read.csv("/users/bcarancibia/CUNY_IS_624/FinalProject/data/scores_team_00214.csv") # team box scores 2014-15
nba <- rbind(nba1,nba2)
summary(nba)
## add data fields
# set opponent stats in each game:
ngames = nrow(nba)
for (game in seq(1,ngames/2)){
nba$opts[2*game-1] = nba$pts[2*game]
nba$opts[2*game] = nba$pts[2*game-1]
nba$ofgm[2*game-1] = nba$fgm[2*game]
nba$ofgm[2*game] = nba$fgm[2*game-1]
nba$ofga[2*game-1] = nba$fga[2*game]
nba$ofga[2*game] = nba$fga[2*game-1]
nba$o3pm[2*game-1] = nba$X3pm[2*game]
nba$o3pm[2*game] = nba$X3pm[2*game-1]
nba$o3pa[2*game-1] = nba$X3pa[2*game]
nba$o3pa[2*game] = nba$X3pa[2*game-1]
nba$oftm[2*game-1] = nba$ftm[2*game]
nba$oftm[2*game] = nba$ftm[2*game-1]
nba$ofta[2*game-1] = nba$fta[2*game]
nba$ofta[2*game] = nba$fta[2*game-1]
nba$oto[2*game-1] = nba$to[2*game]
nba$oto[2*game] = nba$to[2*game-1]
nba$otot[2*game-1] = nba$tot[2*game]
nba$otot[2*game] = nba$tot[2*game-1]
}
# add shooting percentages
nba$fgpct=nba$fgm/nba$fga * 100 #home team
nba$X3ppct=nba$X3pm/nba$X3pa * 100 #home team
nba$ftpct=nba$ftm/nba$fta * 100 #home team
nba$ofgpct=nba$ofgm/nba$ofga * 100 #away team
nba$o3ppct=nba$o3pm/nba$o3pa * 100 #away team
nba$oftpct=nba$oftm/nba$ofta * 100 #away team
# add wins
nba$win = nba$pts > nba$opts
# add home status
nba$ishome = (nba$tm == nba$home)
summary(nba)
str(nba)
#model1 <- glm(win ~ ., data=nba, family="binomial")
#rfImp1 <- varImp(model1, scale = FALSE)
#Warning this will take a long time. Variables that are of interested are ishome, fgpct, ofpct, to, oto, tot, otot, win
# keep only covariates of interest
vars = c("ishome", "fgpct", "ofgpct", "to", "oto", "tot", "otot", "win") # 87.5%
nbaSub = nba[,vars]
# break into train/test data
library("caTools")
split = sample.split(nbaSub$win, SplitRatio=0.7)
nbaTrain = subset(nbaSub, split==TRUE)
nbaTest = subset(nbaSub, split==FALSE)
# or use the whole data set as test data
nbaTest = nbaSub
# now predict wins for test data
nbaLog = glm(win ~ ., data=nbaTrain, family="binomial")
nbaPredict = predict(nbaLog, newdata=nbaTest, type="response")
cm = table(nbaTest$win, nbaPredict>0.5)
cm
plot(cm, col = "blue", main="Prediction Using GLM")
library("matrixcalc")
matrix.trace(cm) / sum(cm)
summary(nbaLog)
#reset values
nbaTest = nbaSub
nbaSub = nba[,vars]
split = sample.split(nbaSub$win, SplitRatio=0.7)
nbaTrain = subset(nbaSub, split==TRUE)
nbaTest = subset(nbaSub, split==FALSE)
# decision tree
library(rpart)
nbaMod = rpart(win ~ ., data=nbaTrain, method="class", minbucket=50)
library(rpart.plot)
prp(nbaMod) # plot tree
nbaPredict = predict(nbaMod, newdata=nbaTest, type="class")
plot(nbaMod, uniform=TRUE,
main="Classification Tree for NBA")
text(nbaMod, use.n=TRUE, all=TRUE, cex=.8)
summary(nbaPredict)
summary(nbaMod)
cm = table(nbaTest$win, nbaPredict > 0.5) # if thresholding needed to classify, e.g. log regression
cm = table(nbaTest$win, nbaPredict)
print(cm)
plot(cm, col = "blue", main="Prediction Using Decision Tree")
library("matrixcalc")
matrix.trace(cm) / sum(cm)
summary(nbaMod)
