legend(800, .9, title="Legend",c("Treatment Group 1", "Treatment Group 2"), lty = 2:3,col=c("red","blue"),cex=0.7)
survdiff(Surv(futime, fustat) ~ rx, data = ovarian)
legend(800, .2, c("p-value: 0.303"), cex=0.8,box.col="white")
install.packages("KMsurv")
library(KMsurv)
data(alloauto)
knitr::kable(alloauto)
my.KMest4 <- survfit(Surv(time, delta)~type,data=alloauto,conf.type="none")
plot(my.KMest4, main="Leukemia - Free Survival", col.main="black", xlab="Time (Months)", ylab="Relapse-Free Survival Proportion",col.lab="blue", cex.lab=0.9 ,col=c("red","blue"),mark.time=TRUE, lty = 2:3)
survdiff(Surv(time, delta) ~ type, data = alloauto)
legend(50, .9, title="Legend",c("Allogeneic", "Autologous"), lty = 2:3,col=c("red","blue"),cex=0.7)
legend(30, .2, c("p-value: 0.537"), cex=0.8,box.col="white")
hmohiv<-read.table("http://www.ats.ucla.edu/stat/R/examples/asa/hmohiv.csv", sep=",", header = TRUE)
drug.coxph <- coxph(Surv(time,censor)~drug, method="efron", data=hmohiv)
drug_ph <-cox.zph(drug.coxph, transform ='log')
plot(drug_ph[1,])
drug_ph
age.coxph <- coxph(Surv(time,censor)~age, method="efron", data=hmohiv)
age_ph <-cox.zph(age.coxph, transform ='log')
plot(age_ph[1,])
age_ph
res <- residuals(age.coxph, type='martingale')
X <- as.matrix(hmohiv[,"age"]) # matrix of covariates
plot(X[,1], res, xlab=c("Age")[1], ylab="residuals")
abline(h=0, lty=2) + lines(lowess(X[,1], res, iter=0))
library(car)
agecat<-recode(age, "20:29='A'; 30:34='B'; 35:39='C';40:54='D'", as.factor=T)
hmohiv
agecat<-recode(hmohiv$age, "20:29='A'; 30:34='B'; 35:39='C';40:54='D'", as.factor=T)
agecat.coxph <- coxph( Surv(time, censor)~agecat, method="efron")
hmohiv["TIME_CHECK"]<-NA
as.Date(hmohiv[,6], "%m/%d/%Y"))
hmohiv$TIME_CHECK<-as.numeric(as.Date(hmohiv[,7], "%m/%d/%Y")-
as.Date(hmohiv[,6], "%m/%d/%Y"))
hmohiv$TIME_CHECK
hmohiv$TIME_CHECK<-round(hmohiv$TIME_CHECK/30.5)
agecat<-recode(hmohiv$age, "20:29='A'; 30:34='B'; 35:39='C';40:54='D'", as.factor=T)
agecat.coxph <- coxph( Surv(time, censor)~agecat, method="efron")
s_obj<-Surv(time, censor)
hmohiv$time<-as.numeric(as.Date(hmohiv[,7], "%m/%d/%Y")- as.Date(hmohiv[,6], "%m/%d/%Y"))
hmohiv$time<-round(hmohiv$TIME_CHECK/30.5)
agecat<-recode(hmohiv$age, "20:29='A'; 30:34='B'; 35:39='C';40:54='D'", as.factor=T)
agecat.coxph <- coxph( Surv(time, censor)~agecat, method="efron")
s_obj<-Surv(time, censor)
s_obj<-Surv(hmohiv$time, censor)
s_obj<-Surv(hmohiv$time, hmohiv$censor)
agecat.coxph <- coxph( Surv(hmohiv$time, hmohiv$censor)~agecat, method="efron")
summary(agecat.ph)
summary(agecat.coxph)
agecat<-recode(age, "20:29='D'; 30:34='B'; 35:39='C';40:54='A'", as.factor=T)
agecat<-recode(hmohiv$age, "20:29='D'; 30:34='B'; 35:39='C';40:54='A'", as.factor=T)
coxph(formula = Surv(time, censor) ~ agecat, method = "efron")
coxph(formula = Surv(hmohiv$time, hmohiv$censor) ~ agecat, method = "efron")
coxph(formula = Surv(hmo$time, hmohiv$censor) ~ agecat + drug, method = "efron")
coxph(formula = Surv(hmohiv$time, hmohiv$censor) ~ agecat + drug, method = "efron")
coxph(formula = Surv(hmohiv$time, hmohiv$censor) ~ agecat + hmohiv$drug, method = "efron")
coxph(formula = Surv(hmohiv$time, hmohiv$censor) ~ agecat, method = "efron")
coxph(formula = Surv(hmohiv$time, hmohiv$censor) ~ agecat, method = "efron")
age <- coxph(formula = Surv(hmohiv$time, hmohiv$censor) ~ agecat, method = "efron")
summary(age)
multi <- coxph(formula = Surv(hmohiv$time, hmohiv$censor) ~ agecat + hmohiv$drug, method = "efron")
summary(multi)
uis<-read.table("http://www.ats.ucla.edu/stat/R/examples/asa/uis.csv", sep=",", header = TRUE)
attach(uis)
knitr::kable(head(uis))
uis_small<-uis[,c(1,2,4,6,8,9,11,12)]
tiny_uis<-uis_small[apply(uis_small,1,function(x)!any(is.na(x))),]
age.coxph <- coxph(Surv(time,censor)~age+strata(site), method="efron", data=tiny_uis)
age.coxph
treat<- coxph(Surv(time,censor)~treat, method="efron", data=tiny_uis)
age <- coxph(Surv(time,censor)~age, method="efron", data=tiny_uis)
ndrugtx <- coxph(Surv(time,censor)~ndrugtx, method="efron", data=tiny_uis)
heroco <- coxph(Surv(time,censor)~hercoc, method="efron", data=tiny_uis)
treat<- coxph(Surv(time,censor)~treat, method="efron", data=tiny_uis)
summary(treat)
age <- coxph(Surv(time,censor)~age, method="efron", data=tiny_uis)
summary(age)
ndrugtx <- coxph(Surv(time,censor)~ndrugtx, method="efron", data=tiny_uis)
summary(ndrugtx)
heroco <- coxph(Surv(time,censor)~hercoc, method="efron", data=tiny_uis)
summary(hercoc)
summary(treat)
summary(age)
summary(ndrugtx)
summary(hercoc)
heroco <- coxph(Surv(time,censor)~hercoc, method="efron", data=tiny_uis)
summary(hercoc)
hercoc <- coxph(Surv(time,censor)~hercoc, method="efron", data=tiny_uis)
summary(hercoc)
fit_four_cox_model<- coxph(Surv(time,censor)~hercoc+treat+age+ndrugtx, method="efron", data=tiny_uis)
summary(fit_four_cox_model)
library(MASS)
stepAIC(fit_four_cox_model)
three <- coxph(Surv(time,censor)~+treat+age+ndrugtx, method="efron", data=tiny_uis)
summary(three)
hmohiv<-read.table("http://www.ats.ucla.edu/stat/R/examples/asa/hmohiv.csv", sep=",", header = TRUE)
hmohiv <- read.table("http://www.ats.ucla.edu/stat/R/examples/asa/hmohiv.csv", sep=",", header = TRUE)
hmohiv$time<-as.numeric(as.Date(hmohiv[,7], "%m/%d/%Y")- as.Date(hmohiv[,6], "%m/%d/%Y"))
hmohiv$time<-round(hmohiv$TIME_CHECK/30.5)
hmohiv$time<-round(hmohiv$time/30.5)
library("matrixcalc")
library("caTools")
library("randomForest")
library("caret")
setwd("/users/bcarancibia/CUNY_IS_624/FinalProject")
## load data
nba1 = read.csv("/users/bcarancibia/CUNY_IS_624/FinalProject/data/scores_team_00213.csv") # team box scores 2013-14
summary(nba1)
summary(nba2)
nba2 = read.csv("/users/bcarancibia/CUNY_IS_624/FinalProject/data/scores_team_00214.csv") # team box scores 2014-15
nba <- rbind(nba1,nba2)
summary(nba)
View(nba)
ngames = nrow(nba)
for (game in seq(1,ngames/2)){
nba$opts[2*game-1] = nba$pts[2*game]
nba$opts[2*game] = nba$pts[2*game-1]
nba$ofgm[2*game-1] = nba$fgm[2*game]
nba$ofgm[2*game] = nba$fgm[2*game-1]
nba$ofga[2*game-1] = nba$fga[2*game]
nba$ofga[2*game] = nba$fga[2*game-1]
nba$o3pm[2*game-1] = nba$X3pm[2*game]
nba$o3pm[2*game] = nba$X3pm[2*game-1]
nba$o3pa[2*game-1] = nba$X3pa[2*game]
nba$o3pa[2*game] = nba$X3pa[2*game-1]
nba$oftm[2*game-1] = nba$ftm[2*game]
nba$oftm[2*game] = nba$ftm[2*game-1]
nba$ofta[2*game-1] = nba$fta[2*game]
nba$ofta[2*game] = nba$fta[2*game-1]
nba$oto[2*game-1] = nba$to[2*game]
nba$oto[2*game] = nba$to[2*game-1]
nba$otot[2*game-1] = nba$tot[2*game]
nba$otot[2*game] = nba$tot[2*game-1]
}
nba$fgpct=nba$fgm/nba$fga * 100 #home team
nba$X3ppct=nba$X3pm/nba$X3pa * 100 #home team
nba$ftpct=nba$ftm/nba$fta * 100 #home team
nba$ofgpct=nba$ofgm/nba$ofga * 100 #away team
nba$o3ppct=nba$o3pm/nba$o3pa * 100 #away team
nba$oftpct=nba$oftm/nba$ofta * 100 #away team
# add wins
nba$win = nba$pts > nba$opts
# add home status
nba$ishome = (nba$tm == nba$home)
View(nba)
## libraries
library("matrixcalc")
library("caTools")
library("randomForest")
library("caret")
setwd("/users/bcarancibia/CUNY_IS_624/FinalProject")
#load data
nba1 = read.csv("/users/bcarancibia/CUNY_IS_624/FinalProject/data/scores_team_00213.csv") # team box scores 2013-14
summary(nba1)
summary(nba2)
nba2 = read.csv("/users/bcarancibia/CUNY_IS_624/FinalProject/data/scores_team_00214.csv") # team box scores 2014-15
nba <- rbind(nba1,nba2)
summary(nba)
#set opponent stats in each game
#what this does is show the stats of the oponent in the same row of data allows for easier field calculations
ngames = nrow(nba)
for (game in seq(1,ngames/2)){
nba$opts[2*game-1] = nba$pts[2*game]
nba$opts[2*game] = nba$pts[2*game-1]
nba$ofgm[2*game-1] = nba$fgm[2*game]
nba$ofgm[2*game] = nba$fgm[2*game-1]
nba$ofga[2*game-1] = nba$fga[2*game]
nba$ofga[2*game] = nba$fga[2*game-1]
nba$o3pm[2*game-1] = nba$X3pm[2*game]
nba$o3pm[2*game] = nba$X3pm[2*game-1]
nba$o3pa[2*game-1] = nba$X3pa[2*game]
nba$o3pa[2*game] = nba$X3pa[2*game-1]
nba$oftm[2*game-1] = nba$ftm[2*game]
nba$oftm[2*game] = nba$ftm[2*game-1]
nba$ofta[2*game-1] = nba$fta[2*game]
nba$ofta[2*game] = nba$fta[2*game-1]
nba$oto[2*game-1] = nba$to[2*game]
nba$oto[2*game] = nba$to[2*game-1]
nba$otot[2*game-1] = nba$tot[2*game]
nba$otot[2*game] = nba$tot[2*game-1]
}
#shooting percentages
nba$fgpct=nba$fgm/nba$fga * 100 #home team
nba$X3ppct=nba$X3pm/nba$X3pa * 100 #home team
nba$ftpct=nba$ftm/nba$fta * 100 #home team
nba$ofgpct=nba$ofgm/nba$ofga * 100 #away team
nba$o3ppct=nba$o3pm/nba$o3pa * 100 #away team
nba$oftpct=nba$oftm/nba$ofta * 100 #away team
#add wins
nba$win = nba$pts > nba$opts
#add home status
nba$ishome = (nba$tm == nba$home)
summary(nba)
str(nba)
#model1 <- glm(win ~ ., data=nba, family="binomial")
#rfImp1 <- varImp(model1, scale = FALSE)
#Warning the above will take a long time. Variables that are of interested are ishome, fgpct, ofpct, to, oto, tot, otot, win
#variables of interest
vars = c("ishome", "fgpct", "ofgpct", "to", "oto", "tot", "otot", "win") # 87.5%
nbaSub = nba[,vars]
# split into train/test data using 70% split ratio
split = sample.split(nbaSub$win, SplitRatio=0.7)
nbaTrain = subset(nbaSub, split==TRUE)
nbaTest = subset(nbaSub, split==FALSE)
# now predict wins for test data
nbaLog = glm(win ~ ., data=nbaTrain, family="binomial")
nbaPredict = predict(nbaLog, newdata=nbaTest, type="response")
cm = table(nbaTest$win, nbaPredict>0.5)
cm
plot(cm, col = "blue", main="Prediction Using GLM")
matrix.trace(cm) / sum(cm)
summary(nbaLog)
#reset values
nbaTest = nbaSub
nbaSub = nba[,vars]
split = sample.split(nbaSub$win, SplitRatio=0.7)
nbaTrain = subset(nbaSub, split==TRUE)
nbaTest = subset(nbaSub, split==FALSE)
# decision tree
library(rpart)
nbaMod = rpart(win ~ ., data=nbaTrain, method="class", minbucket=50)
library(rpart.plot)
prp(nbaMod) # plot tree
nbaPredict = predict(nbaMod, newdata=nbaTest, type="class")
plot(nbaMod, uniform=TRUE,
main="Classification Tree for NBA")
text(nbaMod, use.n=TRUE, all=TRUE, cex=.8)
summary(nbaPredict)
summary(nbaMod)
cm = table(nbaTest$win, nbaPredict > 0.5) # if thresholding needed to classify, e.g. log regression
cm = table(nbaTest$win, nbaPredict)
print(cm)
plot(cm, col = "blue", main="Prediction Using Decision Tree")
matrix.trace(cm) / sum(cm)
summary(nbaMod)
## libraries
library("matrixcalc")
library("caTools")
library("randomForest")
library("caret")
setwd("/users/bcarancibia/CUNY_IS_624/FinalProject")
#load data
nba1 = read.csv("/users/bcarancibia/CUNY_IS_624/FinalProject/data/scores_team_00213.csv") # team box scores 2013-14
summary(nba1)
summary(nba2)
nba2 = read.csv("/users/bcarancibia/CUNY_IS_624/FinalProject/data/scores_team_00214.csv") # team box scores 2014-15
nba <- rbind(nba1,nba2)
summary(nba)
#set opponent stats in each game
#what this does is show the stats of the oponent in the same row of data allows for easier field calculations
ngames = nrow(nba)
for (game in seq(1,ngames/2)){
nba$opts[2*game-1] = nba$pts[2*game]
nba$opts[2*game] = nba$pts[2*game-1]
nba$ofgm[2*game-1] = nba$fgm[2*game]
nba$ofgm[2*game] = nba$fgm[2*game-1]
nba$ofga[2*game-1] = nba$fga[2*game]
nba$ofga[2*game] = nba$fga[2*game-1]
nba$o3pm[2*game-1] = nba$X3pm[2*game]
nba$o3pm[2*game] = nba$X3pm[2*game-1]
nba$o3pa[2*game-1] = nba$X3pa[2*game]
nba$o3pa[2*game] = nba$X3pa[2*game-1]
nba$oftm[2*game-1] = nba$ftm[2*game]
nba$oftm[2*game] = nba$ftm[2*game-1]
nba$ofta[2*game-1] = nba$fta[2*game]
nba$ofta[2*game] = nba$fta[2*game-1]
nba$oto[2*game-1] = nba$to[2*game]
nba$oto[2*game] = nba$to[2*game-1]
nba$otot[2*game-1] = nba$tot[2*game]
nba$otot[2*game] = nba$tot[2*game-1]
}
#shooting percentages
nba$fgpct=nba$fgm/nba$fga * 100 #home team
nba$X3ppct=nba$X3pm/nba$X3pa * 100 #home team
nba$ftpct=nba$ftm/nba$fta * 100 #home team
nba$ofgpct=nba$ofgm/nba$ofga * 100 #away team
nba$o3ppct=nba$o3pm/nba$o3pa * 100 #away team
nba$oftpct=nba$oftm/nba$ofta * 100 #away team
#add wins
nba$win = nba$pts > nba$opts
#add home status
nba$ishome = (nba$tm == nba$home)
summary(nba)
str(nba)
#model1 <- glm(win ~ ., data=nba, family="binomial")
#rfImp1 <- varImp(model1, scale = FALSE)
#Warning the above will take a long time. Variables that are of interested are ishome, fgpct, ofpct, to, oto, tot, otot, win
#variables of interest
vars = c("ishome", "fgpct", "ofgpct", "to", "oto", "tot", "otot", "win") # 87.5%
nbaSub = nba[,vars]
# split into train/test data using 70% split ratio
split = sample.split(nbaSub$win, SplitRatio=0.7)
nbaTrain = subset(nbaSub, split==TRUE)
nbaTest = subset(nbaSub, split==FALSE)
# now predict wins for test data
nbaLog = glm(win ~ ., data=nbaTrain, family="binomial")
nbaPredict = predict(nbaLog, newdata=nbaTest, type="response")
cm = table(nbaTest$win, nbaPredict>0.5)
cm
plot(cm, col = "blue", main="Prediction Using GLM")
matrix.trace(cm) / sum(cm)
summary(nbaLog)
#reset values
nbaTest = nbaSub
nbaSub = nba[,vars]
split = sample.split(nbaSub$win, SplitRatio=0.7)
nbaTrain = subset(nbaSub, split==TRUE)
nbaTest = subset(nbaSub, split==FALSE)
# decision tree
library(rpart)
nbaMod = rpart(win ~ ., data=nbaTrain, method="class", minbucket=50)
library(rpart.plot)
prp(nbaMod) # plot tree
nbaPredict = predict(nbaMod, newdata=nbaTest, type="class")
plot(nbaMod, uniform=TRUE,
main="Classification Tree for NBA")
text(nbaMod, use.n=TRUE, all=TRUE, cex=.8)
summary(nbaPredict)
summary(nbaMod)
cm = table(nbaTest$win, nbaPredict)
print(cm)
plot(cm, col = "blue", main="Prediction Using Decision Tree")
matrix.trace(cm) / sum(cm)
summary(nbaMod)
#setup the rscript
library("matrixcalc")
library("caTools")
library("randomForest")
library("caret")
#####YOU WILL NEED TO CHANGE THIS
setwd("/users/bcarancibia/CUNY_IS_624/FinalProject")
#########
#load data
nba1 = read.csv("/data/scores_team_00213.csv") # team box scores 2013-14
summary(nba1)
summary(nba2)
nba2 = read.csv("/data/scores_team_00214.csv") # team box scores 2014-15
nba <- rbind(nba1,nba2)
summary(nba)
#set opponent stats in each game
#what this does is show the stats of the oponent in the same row of data allows for easier field calculations
ngames = nrow(nba)
for (game in seq(1,ngames/2)){
nba$opts[2*game-1] = nba$pts[2*game]
nba$opts[2*game] = nba$pts[2*game-1]
nba$ofgm[2*game-1] = nba$fgm[2*game]
nba$ofgm[2*game] = nba$fgm[2*game-1]
nba$ofga[2*game-1] = nba$fga[2*game]
nba$ofga[2*game] = nba$fga[2*game-1]
nba$o3pm[2*game-1] = nba$X3pm[2*game]
nba$o3pm[2*game] = nba$X3pm[2*game-1]
nba$o3pa[2*game-1] = nba$X3pa[2*game]
nba$o3pa[2*game] = nba$X3pa[2*game-1]
nba$oftm[2*game-1] = nba$ftm[2*game]
nba$oftm[2*game] = nba$ftm[2*game-1]
nba$ofta[2*game-1] = nba$fta[2*game]
nba$ofta[2*game] = nba$fta[2*game-1]
nba$oto[2*game-1] = nba$to[2*game]
nba$oto[2*game] = nba$to[2*game-1]
nba$otot[2*game-1] = nba$tot[2*game]
nba$otot[2*game] = nba$tot[2*game-1]
}
#shooting percentages
nba$fgpct=nba$fgm/nba$fga * 100 #home team
nba$X3ppct=nba$X3pm/nba$X3pa * 100 #home team
nba$ftpct=nba$ftm/nba$fta * 100 #home team
nba$ofgpct=nba$ofgm/nba$ofga * 100 #away team
nba$o3ppct=nba$o3pm/nba$o3pa * 100 #away team
nba$oftpct=nba$oftm/nba$ofta * 100 #away team
#add wins
nba$win = nba$pts > nba$opts
#add home status
nba$ishome = (nba$tm == nba$home)
summary(nba)
str(nba)
#model1 <- glm(win ~ ., data=nba, family="binomial")
#rfImp1 <- varImp(model1, scale = FALSE)
#Warning the above will take a long time. Variables that are of interested are ishome, fgpct, ofpct, to, oto, tot, otot, win
#variables of interest
vars = c("ishome", "fgpct", "ofgpct", "to", "oto", "tot", "otot", "win") # 87.5%
nbaSub = nba[,vars]
# split into train/test data using 70% split ratio
split = sample.split(nbaSub$win, SplitRatio=0.7)
nbaTrain = subset(nbaSub, split==TRUE)
nbaTest = subset(nbaSub, split==FALSE)
# now predict wins for test data
nbaLog = glm(win ~ ., data=nbaTrain, family="binomial")
nbaPredict = predict(nbaLog, newdata=nbaTest, type="response")
cm = table(nbaTest$win, nbaPredict>0.5)
cm
plot(cm, col = "blue", main="Prediction Using GLM")
matrix.trace(cm) / sum(cm)
summary(nbaLog)
#reset values
nbaTest = nbaSub
nbaSub = nba[,vars]
split = sample.split(nbaSub$win, SplitRatio=0.7)
nbaTrain = subset(nbaSub, split==TRUE)
nbaTest = subset(nbaSub, split==FALSE)
# decision tree
library(rpart)
nbaMod = rpart(win ~ ., data=nbaTrain, method="class", minbucket=50)
library(rpart.plot)
prp(nbaMod) # plot tree
nbaPredict = predict(nbaMod, newdata=nbaTest, type="class")
plot(nbaMod, uniform=TRUE,
main="Classification Tree for NBA")
text(nbaMod, use.n=TRUE, all=TRUE, cex=.8)
summary(nbaPredict)
summary(nbaMod)
cm = table(nbaTest$win, nbaPredict)
print(cm)
plot(cm, col = "blue", main="Prediction Using Decision Tree")
matrix.trace(cm) / sum(cm)
summary(nbaMod)
nba1 = read.csv("/data/scores_team_00213.csv") # team box scores 2013-14
setwd("/users/bcarancibia/CUNY_IS_624/FinalProject")
nba1 = read.csv("/data/scores_team_00213.csv") # team box scores 2013-14
nba2 = read.csv("/data/scores_team_00214.csv") # team box scores 2014-15
nba1 = read.csv("data/scores_team_00213.csv") # team box scores 2013-14
nba2 = read.csv("data/scores_team_00214.csv") # team box scores 2014-15
#setup the rscript
library("matrixcalc")
library("caTools")
library("randomForest")
library("caret")
#####YOU WILL NEED TO CHANGE THIS
setwd("/users/bcarancibia/CUNY_IS_624/FinalProject")
#########
#load data
nba1 = read.csv("data/scores_team_00213.csv") # team box scores 2013-14
summary(nba1)
summary(nba2)
nba2 = read.csv("data/scores_team_00214.csv") # team box scores 2014-15
nba <- rbind(nba1,nba2)
summary(nba)
#set opponent stats in each game
#what this does is show the stats of the oponent in the same row of data allows for easier field calculations
ngames = nrow(nba)
for (game in seq(1,ngames/2)){
nba$opts[2*game-1] = nba$pts[2*game]
nba$opts[2*game] = nba$pts[2*game-1]
nba$ofgm[2*game-1] = nba$fgm[2*game]
nba$ofgm[2*game] = nba$fgm[2*game-1]
nba$ofga[2*game-1] = nba$fga[2*game]
nba$ofga[2*game] = nba$fga[2*game-1]
nba$o3pm[2*game-1] = nba$X3pm[2*game]
nba$o3pm[2*game] = nba$X3pm[2*game-1]
nba$o3pa[2*game-1] = nba$X3pa[2*game]
nba$o3pa[2*game] = nba$X3pa[2*game-1]
nba$oftm[2*game-1] = nba$ftm[2*game]
nba$oftm[2*game] = nba$ftm[2*game-1]
nba$ofta[2*game-1] = nba$fta[2*game]
nba$ofta[2*game] = nba$fta[2*game-1]
nba$oto[2*game-1] = nba$to[2*game]
nba$oto[2*game] = nba$to[2*game-1]
nba$otot[2*game-1] = nba$tot[2*game]
nba$otot[2*game] = nba$tot[2*game-1]
}
#shooting percentages
nba$fgpct=nba$fgm/nba$fga * 100 #home team
nba$X3ppct=nba$X3pm/nba$X3pa * 100 #home team
nba$ftpct=nba$ftm/nba$fta * 100 #home team
nba$ofgpct=nba$ofgm/nba$ofga * 100 #away team
nba$o3ppct=nba$o3pm/nba$o3pa * 100 #away team
nba$oftpct=nba$oftm/nba$ofta * 100 #away team
#add wins
nba$win = nba$pts > nba$opts
#add home status
nba$ishome = (nba$tm == nba$home)
summary(nba)
str(nba)
#model1 <- glm(win ~ ., data=nba, family="binomial")
#rfImp1 <- varImp(model1, scale = FALSE)
#Warning the above will take a long time. Variables that are of interested are ishome, fgpct, ofpct, to, oto, tot, otot, win
#variables of interest
vars = c("ishome", "fgpct", "ofgpct", "to", "oto", "tot", "otot", "win") # 87.5%
nbaSub = nba[,vars]
# split into train/test data using 70% split ratio
split = sample.split(nbaSub$win, SplitRatio=0.7)
nbaTrain = subset(nbaSub, split==TRUE)
nbaTest = subset(nbaSub, split==FALSE)
# now predict wins for test data
nbaLog = glm(win ~ ., data=nbaTrain, family="binomial")
nbaPredict = predict(nbaLog, newdata=nbaTest, type="response")
cm = table(nbaTest$win, nbaPredict>0.5)
cm
plot(cm, col = "blue", main="Prediction Using GLM")
matrix.trace(cm) / sum(cm)
summary(nbaLog)
#reset values
nbaTest = nbaSub
nbaSub = nba[,vars]
split = sample.split(nbaSub$win, SplitRatio=0.7)
nbaTrain = subset(nbaSub, split==TRUE)
nbaTest = subset(nbaSub, split==FALSE)
# decision tree
library(rpart)
nbaMod = rpart(win ~ ., data=nbaTrain, method="class", minbucket=50)
library(rpart.plot)
prp(nbaMod) # plot tree
nbaPredict = predict(nbaMod, newdata=nbaTest, type="class")
plot(nbaMod, uniform=TRUE,
main="Classification Tree for NBA")
text(nbaMod, use.n=TRUE, all=TRUE, cex=.8)
summary(nbaPredict)
summary(nbaMod)
cm = table(nbaTest$win, nbaPredict)
print(cm)
plot(cm, col = "blue", main="Prediction Using Decision Tree")
matrix.trace(cm) / sum(cm)
summary(nbaMod)
